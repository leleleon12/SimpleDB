package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;
    private JoinPredicate joinPredicate;
    private OpIterator opIterator1;
    private OpIterator opIterator2;
   // private boolean open=false;
   // private Tuple next=null;
    private OpIterator[] opIterators=null;
    private Tuple next1=null;


    /**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, OpIterator child1, OpIterator child2) {
        // some code goes here
        joinPredicate=p;
        opIterator1=child1;
        opIterator2=child2;
    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
        return joinPredicate;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        // some code goes here
        return opIterator1.getTupleDesc().getFieldName(joinPredicate.getField1());
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        // some code goes here
        return opIterator2.getTupleDesc().getFieldName(joinPredicate.getField2());
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        // some code goes here
        return TupleDesc.merge(opIterator1.getTupleDesc(),opIterator2.getTupleDesc());
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // some code goes here
        opIterator1.open();
        opIterator2.open();
        open=true;
    }

    public void close() {
        // some code goes here
        opIterator1.close();
        opIterator2.close();
        open=false;
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // some code goes here
        close();
        open();
        opIterator1.rewind();
        opIterator2.rewind();
    }
//    public boolean hasNext() throws TransactionAbortedException, DbException {
//        if (next==null)
//            next=fetchNext();
//        return next!=null;
//    }
//    public Tuple next() throws TransactionAbortedException, DbException {
//        if (next==null)
//            next=fetchNext();
//        if (next==null)
//            throw new NoSuchElementException();
//        Tuple res=next;
//        next=null;
//        return res;
//    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {//!!!!要注意反复使用fetchNext（）时迭代器的位置变化问题
        // some code goes here
        if (next1==null)
            next1=opIterator1.next();
        Tuple next2=null;
        Tuple res=new Tuple(getTupleDesc());
            //next1=opIterator1.next();
        while (true) {
            while (opIterator2.hasNext()){
                next2=opIterator2.next();
                if(joinPredicate.filter(next1,next2)){
                    for (int i=0;i<opIterator1.getTupleDesc().numFields();i++){
                        res.setField(i,next1.getField(i));
                    }
                    for (int i=0;i<opIterator2.getTupleDesc().numFields();i++){
                        res.setField(i+opIterator1.getTupleDesc().numFields(),next2.getField(i));
                    }
                    return res;
                }
            }
            opIterator2.rewind();
            if (opIterator1.hasNext())
                next1=opIterator1.next();
            else
                break;
        }
        return null;
    }

    @Override
    public OpIterator[] getChildren() {
        // some code goes here
        if (opIterators==null) {
            opIterators = new OpIterator[2];
            opIterators[0] = opIterator1;
            opIterators[1] = opIterator2;
        }
        return opIterators;
    }

    @Override
    public void setChildren(OpIterator[] children) {
        // some code goes here
            opIterators=new OpIterator[children.length+2];
            opIterators[0]=opIterator1;
            opIterators[1]=opIterator2;
            for(int i=0;i<children.length+2;i++){
                opIterators[i+2]=children[i];
            }
        }
}
